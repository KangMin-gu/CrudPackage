<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="note">
	<!-- 총 받은 통지 총 갯수 -->
	<select id="totalRows" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) AS totalRows FROM
			( SELECT A.TITLE, C.USERNAME AS FROMUSERNAME, D.USERNAME AS TOUSERNAME, A.REGDATE AS REGDATE
			 	FROM Crud_SaaS.dbo.t_notice AS A
				LEFT OUTER JOIN Crud_Saas.dbo.t_notice02 AS B ON A.NOTICEID = B.NOTICEID
				LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS C ON A.USERNO = C.USERNO
				LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS D ON B.USERNO = D.USERNO
				WHERE B.ISDELETE = 0 AND B.USERNO = #{userno} AND A.SITEID = #{siteid} AND A.NTCWAYEMAIL = 1				
			) AS E 
			<where>
				<if test="title != null">
					AND E.TITLE LIKE '%'+#{title}+'%'
				</if>
				<if test="sender != null">
					AND E.FROMUSERNAME LIKE '%'+#{sender}+'%'
				</if>
				<if test="enddate != null">
					AND E.REGDATE BETWEEN #{startdate} AND DATEADD(DAY,1,#{enddate})
				</if>	
			</where>
	</select>
	<!-- 받은 통지 리스트-->	
	<select id="inbox" parameterType="hashMap" resultType="hashMap">
		SELECT * FROM (
			SELECT A.NOTICEID, A.TITLE, C.USERNAME AS FROMUSERNAME, D.USERNAME AS TOUSERNAME,
				A.IMPORTANT, A.FILECHK, CONVERT(VARCHAR(10), A.REGDATE, 120) AS SENDDATE, A.REGDATE AS SENDDATETIME, A.REGDATE AS REGDATE,
				B.READCHEK, ROW_NUMBER() OVER(order by A.NOTICEID DESC) AS ROWNUM
			FROM Crud_SaaS.dbo.t_notice AS A
			LEFT OUTER JOIN Crud_Saas.dbo.t_notice02 AS B ON A.NOTICEID = B.NOTICEID
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS C ON A.USERNO = C.USERNO
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS D ON B.USERNO = D.USERNO			
			WHERE A.SITEID = #{siteid} AND B.USERNO = #{userno} AND B.ISDELETE = 0 AND A.NTCWAYEMAIL = 1
				<if test="title != null">
					AND A.TITLE LIKE '%'+#{title}+'%'
				</if>
				<if test="sender != null">
					AND C.USERNAME LIKE '%'+#{sender}+'%'
				</if>
				<if test="enddate != null">
					AND A.REGDATE BETWEEN #{startdate} AND DATEADD(DAY,1,#{enddate})
				</if>
			) AS result
		WHERE result.ROWNUM BETWEEN #{startRowNum} AND #{endRowNum} ORDER BY result.NOTICEID DESC
	</select>
	
	<!-- 받은 통지중 읽지않은 갯수 -->
	<select id="noteReadVal" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) AS notReadVal FROM ( 
			SELECT A.TITLE, C.USERNAME AS FROMUSERNAME, D.USERNAME AS TOUSERNAME, A.REGDATE AS REGDATE
			FROM Crud_SaaS.dbo.t_notice AS A
			LEFT OUTER JOIN Crud_Saas.dbo.t_notice02 AS B ON A.NOTICEID = B.NOTICEID
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS C ON A.USERNO = C.USERNO 
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS D ON B.USERNO = D.USERNO
			WHERE A.SITEID = #{siteid} AND B.READCHEK = 0 AND B.ISDELETE = 0 AND B.USERNO = #{userno} AND A.NTCWAYEMAIL = 1			
			) AS E
			<where>
				<if test="title != null">
					AND E.TITLE LIKE '%'+#{title}+'%'
				</if>
				<if test="sender != null">
					AND E.FROMUSERNAME LIKE '%'+#{sender}+'%'
				</if>
				<if test="enddate != null">
					AND E.REGDATE BETWEEN #{startdate} AND DATEADD(DAY,1,#{enddate})
				</if>				
			</where>
	</select>
		
	<!--  보낸 통지 총갯수 -->
	<select id="outTotalRows" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) AS totalRows FROM
			( SELECT A.TITLE, C.USERNAME AS FROMUSERNAME, D.USERNAME AS TOUSERNAME, A.REGDATE AS REGDATE
			 	FROM Crud_SaaS.dbo.t_notice AS A
				LEFT OUTER JOIN Crud_Saas.dbo.t_notice02 AS B ON A.NOTICEID = B.NOTICEID
				LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS C ON A.USERNO = C.USERNO
				LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS D ON B.USERNO = D.USERNO
				WHERE B.ISDELETE = 0 AND A.USERNO = #{userno} AND A.SITEID = #{siteid} AND A.NTCWAYEMAIL = 1 				
			) AS E 
			<where>
				<if test="title != null">
					AND E.TITLE LIKE '%'+#{title}+'%'
				</if>
				<if test="sender != null">
					AND E.TOUSERNAME LIKE '%'+#{recipient}+'%'
				</if>
				<if test="enddate != null">
					AND E.REGDATE BETWEEN #{startdate} AND DATEADD(DAY,1,#{enddate})
				</if>	
			</where>	
	</select>
	
	<!-- 보낸 통지 리스트-->	
	<select id="outbox" parameterType="hashMap" resultType="hashMap">
		SELECT * FROM (
			SELECT A.NOTICEID, A.TITLE, C.USERNAME AS FROMUSERNAME, D.USERNAME AS TOUSERNAME,
				A.IMPORTANT, A.FILECHK, CONVERT(VARCHAR(10), A.REGDATE, 120) AS SENDDATE, A.REGDATE AS SENDDATETIME, A.REGDATE AS REGDATE,
				B.READCHEK, ROW_NUMBER() OVER(order by A.NOTICEID DESC) AS ROWNUM
			FROM Crud_SaaS.dbo.t_notice AS A
			LEFT OUTER JOIN Crud_Saas.dbo.t_notice02 AS B ON A.NOTICEID = B.NOTICEID
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS C ON A.USERNO = C.USERNO
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS D ON B.USERNO = D.USERNO			
			WHERE A.SITEID = #{siteid} AND A.USERNO = #{userno} AND B.ISDELETE = 0 AND A.NTCWAYEMAIL = 1
				<if test="title != null">
					AND A.TITLE LIKE '%'+#{title}+'%'
				</if>
				<if test="sender != null">
					AND E.TOUSERNAME LIKE '%'+#{recipient}+'%'
				</if>
				<if test="enddate != null">
					AND A.REGDATE BETWEEN #{startdate} AND DATEADD(DAY,1,#{enddate})
				</if>
			) AS result
		WHERE result.ROWNUM BETWEEN #{startRowNum} AND #{endRowNum} ORDER BY result.NOTICEID DESC
	</select>
	
	<!-- 보낸 통지중 읽지않은 갯수 -->
	<select id="noteOutReadVal" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) AS notReadVal FROM ( 
			SELECT A.TITLE, C.USERNAME AS FROMUSERNAME, D.USERNAME AS TOUSERNAME, A.REGDATE AS REGDATE
			FROM Crud_SaaS.dbo.t_notice AS A
			LEFT OUTER JOIN Crud_Saas.dbo.t_notice02 AS B ON A.NOTICEID = B.NOTICEID
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS C ON A.USERNO = C.USERNO 
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS D ON B.USERNO = D.USERNO
			WHERE A.SITEID = #{siteid} AND B.READCHEK = 0 AND B.ISDELETE = 0 AND A.USERNO = #{userno} AND A.NTCWAYEMAIL = 1			
			) AS E
			<where>
				<if test="title != null">
					AND E.TITLE LIKE '%'+#{title}+'%'
				</if>
				<if test="sender != null">
					AND E.TOUSERNAME LIKE '%'+#{recipient}+'%'
				</if>
				<if test="enddate != null">
					AND E.REGDATE BETWEEN #{startdate} AND DATEADD(DAY,1,#{enddate})
				</if>				
			</where>
	</select>

<!-- 중요 통지 총 갯수 -->
	<select id="importTotalRows" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) AS totalRows FROM
			( SELECT A.TITLE, C.USERNAME AS FROMUSERNAME, D.USERNAME AS TOUSERNAME, A.REGDATE AS REGDATE
			 	FROM Crud_SaaS.dbo.t_notice AS A
				LEFT OUTER JOIN Crud_Saas.dbo.t_notice02 AS B ON A.NOTICEID = B.NOTICEID
				LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS C ON A.USERNO = C.USERNO
				LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS D ON B.USERNO = D.USERNO
				WHERE B.ISDELETE = 0 AND B.USERNO = #{userno} AND A.SITEID = #{siteid} AND A.NTCWAYEMAIL = 1 AND A.IMPORTANT = 1				
			) AS E 
			<where>
				<if test="title != null">
					AND E.TITLE LIKE '%'+#{title}+'%'
				</if>
				<if test="sender != null">
					AND E.FROMUSERNAME LIKE '%'+#{sender}+'%'
				</if>
				<if test="enddate != null">
					AND E.REGDATE BETWEEN #{startdate} AND DATEADD(DAY,1,#{enddate})
				</if>	
			</where>
	</select>
	<!-- 중요 통지 리스트-->	
	<select id="importbox" parameterType="hashMap" resultType="hashMap">
		SELECT * FROM (
			SELECT A.NOTICEID, A.TITLE, C.USERNAME AS FROMUSERNAME, D.USERNAME AS TOUSERNAME, 
				A.IMPORTANT, A.FILECHK, CONVERT(VARCHAR(10), A.REGDATE, 120) AS SENDDATE, A.REGDATE AS SENDDATETIME, A.REGDATE AS REGDATE,
				B.READCHEK, ROW_NUMBER() OVER(order by A.NOTICEID DESC) AS ROWNUM
			FROM Crud_SaaS.dbo.t_notice AS A
			LEFT OUTER JOIN Crud_Saas.dbo.t_notice02 AS B ON A.NOTICEID = B.NOTICEID
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS C ON A.USERNO = C.USERNO
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS D ON B.USERNO = D.USERNO			
			WHERE A.SITEID = #{siteid} AND B.USERNO = #{userno} AND B.ISDELETE = 0 AND A.NTCWAYEMAIL = 1 AND IMPORTANT = 1
				<if test="title != null">
					AND A.TITLE LIKE '%'+#{title}+'%'
				</if>
				<if test="sender != null">
					AND C.USERNAME LIKE '%'+#{sender}+'%'
				</if>
				<if test="enddate != null">
					AND A.REGDATE BETWEEN #{startdate} AND DATEADD(DAY,1,#{enddate})
				</if>
			) AS result
		WHERE result.ROWNUM BETWEEN #{startRowNum} AND #{endRowNum} ORDER BY result.NOTICEID DESC
	</select>
	
	<!-- 중요 통지중 읽지않은 갯수 -->
	<select id="noteimportReadVal" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) AS notReadVal FROM ( 
			SELECT A.TITLE, C.USERNAME AS FROMUSERNAME, D.USERNAME AS TOUSERNAME, A.REGDATE AS REGDATE
			FROM Crud_SaaS.dbo.t_notice AS A
			LEFT OUTER JOIN Crud_Saas.dbo.t_notice02 AS B ON A.NOTICEID = B.NOTICEID
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS C ON A.USERNO = C.USERNO 
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS D ON B.USERNO = D.USERNO
			WHERE A.SITEID = #{siteid} AND B.READCHEK = 0 AND B.ISDELETE = 0 AND B.USERNO = #{userno} AND A.NTCWAYEMAIL = 1 AND IMPORTANT = 1			
			) AS E
			<where>
				<if test="title != null">
					AND E.TITLE LIKE '%'+#{title}+'%'
				</if>
				<if test="sender != null">
					AND E.FROMUSERNAME LIKE '%'+#{sender}+'%'
				</if>
				<if test="enddate != null">
					AND E.REGDATE BETWEEN #{startdate} AND DATEADD(DAY,1,#{enddate})
				</if>				
			</where>
	</select>

<!-- 휴지통 통지 총 갯수 -->
	<select id="trashTotalRows" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) AS totalRows FROM
			( SELECT A.TITLE, C.USERNAME AS FROMUSERNAME, D.USERNAME AS TOUSERNAME, A.REGDATE AS REGDATE
			 	FROM Crud_SaaS.dbo.t_notice AS A
				LEFT OUTER JOIN Crud_Saas.dbo.t_notice02 AS B ON A.NOTICEID = B.NOTICEID
				LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS C ON A.USERNO = C.USERNO
				LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS D ON B.USERNO = D.USERNO
				WHERE B.ISDELETE = 2 AND B.USERNO = #{userno} AND A.SITEID = #{siteid} AND A.NTCWAYEMAIL = 1				
			) AS E 
			<where>
				<if test="title != null">
					AND E.TITLE LIKE '%'+#{title}+'%'
				</if>
				<if test="sender != null">
					AND E.FROMUSERNAME LIKE '%'+#{sender}+'%'
				</if>
				<if test="enddate != null">
					AND E.REGDATE BETWEEN #{startdate} AND DATEADD(DAY,1,#{enddate})
				</if>	
			</where>
	</select>
	<!-- 휴지통 통지 리스트-->	
	<select id="trashbox" parameterType="hashMap" resultType="hashMap">
		SELECT * FROM (
			SELECT A.NOTICEID, A.TITLE, C.USERNAME AS FROMUSERNAME, D.USERNAME AS TOUSERNAME,
				A.IMPORTANT, A.FILECHK, CONVERT(VARCHAR(10), A.REGDATE, 120) AS SENDDATE, A.REGDATE AS SENDDATETIME, A.REGDATE AS REGDATE,
				B.READCHEK, ROW_NUMBER() OVER(order by A.NOTICEID DESC) AS ROWNUM
			FROM Crud_SaaS.dbo.t_notice AS A
			LEFT OUTER JOIN Crud_Saas.dbo.t_notice02 AS B ON A.NOTICEID = B.NOTICEID
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS C ON A.USERNO = C.USERNO
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS D ON B.USERNO = D.USERNO			
			WHERE A.SITEID = #{siteid} AND B.USERNO = #{userno} AND B.ISDELETE = 2 AND A.NTCWAYEMAIL = 1
				<if test="title != null">
					AND A.TITLE LIKE '%'+#{title}+'%'
				</if>
				<if test="sender != null">
					AND C.USERNAME LIKE '%'+#{sender}+'%'
				</if>
				<if test="enddate != null">
					AND A.REGDATE BETWEEN #{startdate} AND DATEADD(DAY,1,#{enddate})
				</if>
			) AS result
		WHERE result.ROWNUM BETWEEN #{startRowNum} AND #{endRowNum} ORDER BY result.NOTICEID DESC
	</select>
	
	<!-- 휴지통 통지중 읽지않은 갯수 -->
	<select id="notetrashReadVal" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) AS notReadVal FROM ( 
			SELECT A.TITLE, C.USERNAME AS FROMUSERNAME, D.USERNAME AS TOUSERNAME, A.REGDATE AS REGDATE
			FROM Crud_SaaS.dbo.t_notice AS A
			LEFT OUTER JOIN Crud_Saas.dbo.t_notice02 AS B ON A.NOTICEID = B.NOTICEID
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS C ON A.USERNO = C.USERNO 
			LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS D ON B.USERNO = D.USERNO
			WHERE A.SITEID = #{siteid} AND B.READCHEK = 0 AND B.ISDELETE = 2 AND B.USERNO = #{userno} AND A.NTCWAYEMAIL = 1			
			) AS E
			<where>
				<if test="title != null">
					AND E.TITLE LIKE '%'+#{title}+'%'
				</if>
				<if test="sender != null">
					AND E.FROMUSERNAME LIKE '%'+#{sender}+'%'
				</if>
				<if test="enddate != null">
					AND E.REGDATE BETWEEN #{startdate} AND DATEADD(DAY,1,#{enddate})
				</if>				
			</where>
	</select>

	<!-- 통지상세정보 -->
	<select id="noteDetail" parameterType="hashMap" resultType="hashMap">
		SELECT A.NOTICEID, A.TITLE, A.CONTENT, A.LNKURL, B.USERNAME AS FROMUSERNAME, B.EMAIL AS FROMEMAIL, A.REGDATE
		FROM Crud_SaaS.dbo.t_notice AS A
		LEFT OUTER JOIN Crud_SaaS.dbo.TB980010 AS B ON A.USERNO = B.USERNO
		WHERE A.SITEID = #{siteid} AND A.ISDELETE = 0 AND A.NTCWAYEMAIL = 1 AND A.NOTICEID = #{noticeid}
	</select>
	
	<!-- 첨부파일리스트 -->
	<select id="noteFile" parameterType="hashMap" resultType="hashMap">
		SELECT FILEID, SAVEFILENAME, FILESIZE, ORGFILENAME, CONVERT(VARCHAR(10), REGDATE, 120) AS REGDATE  FROM Crud_SaaS.dbo.t_noticefile WHERE NOTICEID = #{noticeid}
	</select>
	
	<!-- 참조 리스트 -->
	<select id="ccList" parameterType="hashMap" resultType="hashMap">
		SELECT A.USERNO, B.USERNAME, B.EMAIL, A.CHKCC FROM Crud_SaaS.dbo.t_notice02 AS A
		INNER JOIN Crud_SaaS.dbo.TB980010 AS B ON A.USERNO = B.USERNO
		WHERE A.NOTICEID = #{noticeid} AND A.SITEID = #{siteid} AND CHKCC = 1
	</select>
	<!-- 받는이 리스트 -->
	<select id="toList" parameterType="hashMap" resultType="hashMap">
		SELECT A.USERNO, B.USERNAME, B.EMAIL, A.CHKCC FROM Crud_SaaS.dbo.t_notice02 AS A
		INNER JOIN Crud_SaaS.dbo.TB980010 AS B ON A.USERNO = B.USERNO
		WHERE A.NOTICEID = #{noticeid} AND A.SITEID = #{siteid} AND CHKCC = 0
	</select>	
	
	<!-- 읽음으로 표시 -->
	<update id="noteEyeChk" parameterType="hashMap">
		UPDATE Crud_SaaS.dbo.t_notice02 SET READCHEK = 1, READDATE = GETDATE(), EDTUSER = #{userno}, EDTDATE = GETDATE()
		 WHERE SITEID = #{siteid} AND NOTICEID = #{noticeid} AND ISDELETE = 0
	</update>
	
	<!-- 중요로 표시 -->
	<update id="noteImportChk" parameterType="noteDto">
		UPDATE Crud_SaaS.dbo.t_notice SET IMPORTANT = 1, EDTUSER = #{userno}, EDTDATE = GETDATE()
		 WHERE SITEID = #{siteid} AND NOTICEID = #{noticeid} AND ISDELETE = 0
	</update>
	
	<!-- 휴지통 이동 -->
	<update id="noteTrashChk" parameterType="noteDto">
		UPDATE Crud_SaaS.dbo.t_notice SET ISDELETE = 2, EDTUSER = #{userno}, EDTDATE = GETDATE()
		WHERE SITEID = #{siteid} AND NOTICEID = #{noticeid} AND ISDELETE = 0
	</update>
	
	<!-- 통지 삭제-->
	<update id="noteDeleteChk" parameterType="noteDto">
		UPDATE Crud_SaaS.dbo.t_notice SET ISDELETE = 1, EDTUSER = #{userno}, EDTDATE = GETDATE() 
		WHERE SITEID = #{siteid} AND NOTICEID = #{noticeid} AND ISDELETE = 2
	</update>
	
	<!-- 보관함으로 이동-->
	<update id="noteReturnChk" parameterType="noteDto">
		UPDATE Crud_SaaS.dbo.t_notice SET ISDELETE = 0, EDTUSER = #{userno}, EDTDATE = GETDATE() 
		WHERE SITEID = #{siteid} AND NOTICEID = #{noticeid} AND ISDELETE = 1
	</update>
	
	<!-- 카테고리 화면 -->
	<select id="noteCategory" parameterType="noteCategoryDto" resultType="hashMap">
		SELECT CATEGORY, CONVERT(VARCHAR(10), REGDATE, 120) AS REGDATE FROM Crud_SaaS.dbo.t_noticecategory WHERE USERNO = #{userno} AND SITEID = #{siteid}
	</select>
	
	<!-- 통지등록 -->
	<insert id="noteSend" parameterType="noteDto">
		<selectKey resultType="int" keyProperty="noticeid" order="AFTER">
			INSERT INTO t_notice 
			(USERNO, NTCWAYEMAIL, TITLE, CONTENT, LNKURL, REGUSER, REGDATE, SITEID, IMPORTANT, EDTUSER, EDTDATE, FILECHK) 
			VALUES 
			(#{userno}, 1, #{title}, #{content}, #{linkurl}, #{userno}, GETDATE(), #{siteid}, #{important}, #{userno}, GETDATE(), #{filechk} )
			
			SELECT SCOPE_IDENTITY() 
		</selectKey>	
	</insert>
	
	<!-- to / cc 등록 -->
	<insert id="toAndCc" parameterType="noteDto">
		INSERT INTO t_notice02
		(NOTICEID, USERNO, CHKCC, SITEID, EDTUSER, EDTDATE )
		VALUES
		(#{noticeid}, #{userno}, #{chkcc}, #{siteid}, #{userno}, GETDATE() )
	</insert>
</mapper>